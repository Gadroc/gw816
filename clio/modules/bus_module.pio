;
; Copyright 2023 Craig Courtney
;
; Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
; following conditions are met:
;
; 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
;    disclaimer.
;
; 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
;    following disclaimer in the documentation and/or other materials provided with the distribution.
;
; 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
;    products derived from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

.define RE_PIN 28
.define CS_PIN 29

;
; bus_control
; -----------
; Manage pin direction of data pins for reading.
;
; Output Pins: D0-D7
; JMP Pin: CS_PIN
;
.program bus_control
.wrap_target
    mov osr, ~null
    wait 0 gpio RE_PIN
    jmp skip
    out pindirs, 8
 skip:
    mov osr, null
    wait 1 gpio RE_PIN
    out pindirs, 8
.wrap

;
; bus_read
; --------
; Orchestrates read requests for DMA transfers. DMA transfers should be setup to ping-pong between transferring
; address and data.  Pin direction is controlled by bus_control program.  Before starting program Y must be set to
; the base address of the register memory.  Register memory must be aligned 16k byte boundary in order for shift in
; of the address to work correctly.
;
; ** Program must be called at 240 MHz frequency for bus timings to be correct. **
;
; RX Buffer - Populated with memory address ROM/Registers to read.
; Tx Buffer - Data that will be written out to the bus.
;
; Input Pins: A0-A15
; Output Pins: D0-D7
; JMP Pin: CS_PIN
;
.program bus_read
.side_set 1
skip:
    wait 1 gpio RE_PIN  side 1  ; Skip to the next request
.wrap_target
    mov isr, y          side 1  ; Move base address of register data
    wait 0 gpio RE_PIN  side 1  ; Wait for a RE to turn on
    jmp pin skip        side 1  ; We are not selected so wait for the next read req
    in pins, 16         side 1  ; Shift in lower 16 bits of address
    mov osr, ~null      side 1
    out pindirs, 8      side 1
    pull block          side 1  ; Wait for data available
    out pins, 8         side 1  ; Shift out the data
    mov osr, null       side 0
    wait 1 gpio RE_PIN  side 0  ; Ack the request and wait for RE to drop
    out pindirs, 8      side 1
.wrap
