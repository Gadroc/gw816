;
; Copyright 2023 Craig Courtney
;
; Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
; following conditions are met:
;
; 1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following
;    disclaimer.
;
; 2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
;    following disclaimer in the documentation and/or other materials provided with the distribution.
;
; 3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote
;    products derived from this software without specific prior written permission.
;
; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED WARRANTIES,
; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
; WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE
; USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;

.define CLK_PIN 27
.define CS_PIN 28

;
; bus_control
; -----------
; Manages turning the DATA PINs between outputs and inputs.
;
; Rx Buffer: N/A
; Tx Buffer: N/A
;
; Input Pins: A0-A13, D7-0, RW
; Output Pins: D0-D7
; JMP Pin: CS_PIN
;
.program bus_control
next:
.wrap_target
    mov osr, null               ; Reset OSR to zero for setting DATA PINs to input
    wait 0 gpio CLK_PIN         ; Wait for clock low
    out pindirs, 8          [7] ; Set DATA PINs to input and wait for tAH
    in pins, 23                 ; Shift in Address / RW and move RW in X
    in null, 31                 ;
    mov x, isr                  ;
    mov osr, ~null              ; Reset OSR to ones for setting DATA PINs to output
    wait 1 gpio CLK_PIN         ; Wait for high clock
    jmp !x next                 ; If RW is zero this is a write so skip
    jmp pin next                ; If CS is high then we are not selected so skip
    out pindirs, 8              ; Turn DATA PINs to output
.wrap

;
; bus_read
; --------
; Orchestrates read requests for DMA transfers. DMA transfers should be setup to ping-pong between transferring
; address and data.  Pin direction is controlled by bus_control program.  Before starting program Y must be set to
; the base address of the register memory.  Register memory must be aligned 16k byte boundary in order for shift in
; of the address to work correctly.
;
; ** Program must be called at 240 MHz frequency for bus timings to be correct. **
;
; RX Buffer - Populated with memory address ROM/Registers to read.
; Tx Buffer - Data that will be written out to the bus.
;
; Input Pins: A0-A13
; Output Pins: D0-D7
; JMP Pin: CS_PIN
;
.program bus_read
skip:
    wait 1 gpio CLK_PIN
.wrap_target
    mov isr, y                  ; Move base address of register data
    wait 0 gpio CLK_PIN  [7]    ; Wait for a Phi2 low for tAH
    jmp pin skip
    in pins, 14                 ; Shift in lower 14 bits of address
    wait 1 gpio CLK_PIN         ; Wait for clock high
    pull block                  ; Wait for data available
    out pins, 8                 ; Shift out the data
.wrap

;
; reg_events
; --------
; Creates a stream of events for register activity (addresses 3fc0 - 3fff).
;
; RX Buffer - Populated with address + data for register reads/writes.
;               Bits 31-23 - Unused
;               Bits    22 - Read Flag
;               Bits 21:14 - Data
;               Bit   13:0 - Address
;
; Input Pins: A0-A13, D0-D7, WE
; JMP Pin: CS_PIN
;
.program reg_events
    mov isr, ~null                  ; Prepare Y to match top 8 bits of address being all high
    in null, 24
    mov y, isr
.wrap_target
skip:
    wait 0 gpio CLK_PIN [10]        ; Wait for a Phi2 low for tAH
    in pins, 14                     ; Check to see if top 8 bits of address are high
    in null, 24
    mov x, isr
    jmp x!=y skip                   ; If not skip processing as this is not a register
    wait 1 gpio CLK_PIN             ; Wait for Phi2 High
    jmp pin skip [9]                ; Skip if we are not selected, and wait for tMDS
    in pins, 23
    push
.wrap
